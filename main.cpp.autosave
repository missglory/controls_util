#include <iostream>
#include <dlib/image_processing/frontal_face_detector.h>
#include <dlib/image_processing/render_face_detections.h>
#include <dlib/image_processing.h>
#include <dlib/gui_widgets.h>
#include <dlib/image_io.h>
#include <dlib/opencv.h>
#include <opencv2/imgproc.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgcodecs.hpp>
using namespace std;


struct UserData{
    cv::Mat image;
    cv::Mat orig;
    std::vector<cv::Point2f> points; //perimetr
    std::vector<double> ratio;
    std::vector<cv::Point2f> shape; //68 landmarks
    std::vector<cv::Point2f> controls;
    cv::RotatedRect ellipse;
    std::vector<double> dist;
};

cv::Mat mask;
cv::Mat mask2;
cv::Mat elmask;
cv::Mat anglemask;

cv::Point2f rot(cv::Point2f p, float a)
{
    return cv::Point2f(p.x * std::cos(a) - p.y * std::sin(a),
                       p.x * std::sin(a) + p.y * std::cos(a));
}

cv::Point2f ellipsePoint(cv::RotatedRect& ell, float angle, float scale = 1.f)
{
    return ell.center + rot(cv::Point2f(ell.size.width/2.f * std::cos(angle), ell.size.height/2.f * std::sin(angle)) * scale, ell.angle / 180.f * 3.14f);
}


float getratio(UserData& ud, cv::Mat& contour, float angle)
{
    static cv::Point2f eight = ud.shape[8];
    static cv::Point2f nose = ud.shape[33];

    cv::Point2f shiftpoint = eight - nose;
//    cv::Point2f elp = ellipsePoint(ud.ellipse, angle);
    mask2 = cv::Mat::zeros(ud.image.rows, ud.image.cols, CV_32F);
    cv::Point2f vec = shiftpoint * 3.f;
    vec = rot(vec, angle);
    vec += nose;
    cv::line(mask2, nose, vec, cv::Scalar(1.0), 2);

    cv::multiply(contour, mask2, mask2);

    cv::Point2f pt(-1.f, -1.f), ptel(-1.f, -1.f);
    for (int x = 0; x < mask2.cols; x++){
        for (int y = 0; y < mask2.rows; y++){
            if (mask2.at<float>(y,x) > 0.9f){
                pt = {(float)x,(float)y};
            }
            if (mask2.at<float>(y,x) > 0.6f && mask2.at<float>(y,x) < 0.8f){
                ptel = {(float)x,(float)y};
            }
            if (pt.x > 0.f && ptel.x > 0.f) {
                break;
            }
        }
        if (pt.x > 0.f && ptel.x > 0.f) {
            break;
        }
    }


//    cv::Mat testMask;
//    mask2.copyTo(testMask);
//    testMask += contour / 3.0f;
//    cv::circle(testMask, eight, 2, cv::Scalar(1.f), 3);
//    cv::circle(testMask, ptel, 2, cv::Scalar(.7f), 3);
//    cv::circle(testMask, pt, 2, cv::Scalar(1.f), 3);
//    imshow("am", testMask);

    return cv::norm(pt - nose) / cv::norm(ptel - nose);
}


void mouse_callback(int event, int x, int y, int flags, void* userdata)
{
    static int activeCP = -1;
    cv::Point2f currentP(x, y);
    UserData* ud = (UserData*)userdata;

    cv::Mat& image		= ud->image;
    cv::Mat& orig		= ud->orig;
    float w			= image.cols;
    float h			= image.rows;

    mask = cv::Mat::zeros(image.rows, image.cols, CV_32F);
    mask2 = cv::Mat::zeros(image.rows, image.cols, CV_32F);

    if (event == cv::EVENT_LBUTTONUP) {
        activeCP = -1;
    }
    if (event == cv::EVENT_LBUTTONDOWN)
    {
        for (int i = 0; i < ud->controls.size(); i++) {
            if (cv::norm(currentP - ud->controls[i]) < 5) {
                activeCP = i;
                break;
            }
        }
    }

    if (event == cv::EVENT_MOUSEMOVE && (flags & cv::EVENT_FLAG_LBUTTON)) {
        if (activeCP > -1)
        {
            ud->controls[activeCP] = currentP;
            ud->ratio[activeCP] = cv::norm(currentP - ud->shape[33]) / ud->dist[activeCP];
            orig.copyTo(image);

            std::vector<std::vector<cv::Point> > ctr(1);
            for (int i = 0; i < ud->controls.size(); i++)
            {
                ctr[0].push_back(ud->controls[i]);
            }

            cv::drawContours(image, ctr, 0, cv::Scalar(120, 0, 0));
            cv::drawContours(mask, ctr, 0, cv::Scalar(1.f));
            cv::ellipse(mask, ud->ellipse, cv::Scalar(0.7f), 2);

//            getratio(*ud, mask, 0.68f);

            for (int i = 0; i < ud->controls.size(); i++)
            {
                auto pt = ud->controls[i];
                std::cout << pt << std::endl;
                cv::circle(image, pt, 2, cv::Scalar(0, 255, 0), 3);
            }

            int quant = 1000;
            std::cout << "------------------------------------" << std::endl;
            for (float i = 0; i < quant; i++)
            {
                float t = 3.14f * i / quant * 2.f;
                float val = getratio(*ud, mask, t);
                cv::line(image, cv::Point2d(w/1.5 + i / quant * w/3.0, val * 100), cv::Point2d(w/1.5 + i / quant * w/3.0, 0), cv::Scalar(255), 2);
                std::cout << setprecision(4) << t << ":" << val << std::endl;
            }

            cv::imshow("show", image);
        }
    }

}



int main()
{
    dlib::frontal_face_detector dlib_detector = dlib::get_frontal_face_detector();
    dlib::shape_predictor pose_model;
    try {
        dlib::deserialize("../shape_predictor_68_face_landmarks.dat") >> pose_model;
    }
    catch (...) {
        return false;
    }

    cv::namedWindow("show", cv::WINDOW_FREERATIO);
    cv::Mat img = cv::imread("../boy.jpg");
    cv::Mat imggray;
    int ch = img.channels();
    int tp = img.type();
    cv::cvtColor(img, imggray, cv::COLOR_RGB2GRAY);
    ch = imggray.channels();
    tp = imggray.type();

    dlib::cv_image<uchar> dlibimg(imggray);
    std::vector<dlib::rectangle> faces_dlib = dlib_detector(dlibimg);

    UserData ud;

    if(!faces_dlib.empty()) {
        dlib::full_object_detection shape_dlib = pose_model(dlibimg, faces_dlib[0]);
        for (unsigned j = 0; j < shape_dlib.num_parts(); j++) ud.shape.push_back(cv::Point(shape_dlib.part(j).x(), shape_dlib.part(j).y()));
    }
    auto& face = faces_dlib[0];

    ud.image = img;

    int ptSize = 16;
    ud.points.resize(ptSize);
    ud.dist.resize(ptSize);
    for (int i = 0; i < ptSize; i++)
    {
        auto pt = ud.shape[i];
        ud.points[i] = pt;
        ud.dist[i] = cv::norm(pt - ud.shape[33]);
    }

    ud.ellipse = fitEllipse( cv::Mat(ud.points) );
    cv::ellipse(img, ud.ellipse, cv::Scalar(50,50,50), 2, 8);
    elmask = cv::Mat(img.rows, img.cols, CV_32F);
    cv::ellipse(elmask, ud.ellipse, cv::Scalar(1.0f), 2);


    img.copyTo(ud.orig);

    int controlsSize = 30;
    ud.controls.resize(controlsSize);

    ud.ratio = std::vector<double>(controlsSize, 1.0);

    for (int i = 0; i < controlsSize; i++)
    {
        float t = 3.14f * i / controlsSize * 2.f;
        ud.controls[i] = ellipsePoint(ud.ellipse, t, 1.1f);
        cv::circle(img, ud.controls[i], 2, cv::Scalar(255, 0, 0), 3);
    }
    cv::imshow("show", img);
//    cv::namedWindow("am");

    for (int x = 0; x < anglemask.cols; x+=20)
    {
        for (int y = 0; y < anglemask.rows; y+=20)
        {
            cv::Point2f vec(x, y);
            vec -= ud.ellipse.center;
            float val = 0.f;
            if (vec.x < 0.01 && vec.x > -0.01)
            {
                if (vec.y > 0.f)
                    val = 3.14f / 2.f;
                else {
                    val = -3.14f / 2.f;
                }
            } else {
                val = std::atan(vec.y/vec.x);
            }
            if (vec.x < 0.f && vec.y < 0.f)
                val += 3.14f * 1.5f;
            if (vec.x < 0.f && vec.y > 0.f)
                val += 3.14f;

            anglemask.at<float>(x,y) = val;
            std::cout << std::setprecision(2) << val << " ";
        }
        std::cout << std::endl;
    }

    cv::setMouseCallback("show", mouse_callback, &ud);
    cv::waitKey();
    
    
    
    return 0;
}
